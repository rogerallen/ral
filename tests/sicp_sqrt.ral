;; SICP:
;; (define (sqrt-iter guess x)
;;   (if (good-enough? guess x)
;;       guess
;;       (sqrt-iter (improve guess x)
;;                 x)))
;; (define (improve guess x)
;;   (average guess (/ x guess)))
;; (define (average x y)
;;   (/ (+ x y) 2))
;; (define (good-enough? guess x)
;;   (< (abs (- (square guess) x)) 0.001))
;; (define (sqrt x)
;;   (sqrt-iter 1.0 x))

(def! square
  (fn* [x] (* x x)))

(def! average
  (fn* [x y]
    (/ (+ x y) 2.0)))

(def! improve
  (fn* [guess x]
    (average guess (/ x guess))))

(def! good-enough? 
  (fn* [guess x]
    (< (abs (- (square guess) x)) 0.000001)))

(def! sqrt-iter
  (fn* [guess x]
    (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x))))

(def! sicp-sqrt 
  (fn* [x]
    (sqrt-iter 1.0 x)))

(println "sicp-sqrt" (sicp-sqrt 13524.))
(println "sqrt     " (sqrt 13524.))